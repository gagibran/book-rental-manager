// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleBookManagement.Infrastructure.Data;

#nullable disable

namespace SimpleBookManagement.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221231231115_AddedInitialEntities")]
    partial class AddedInitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.Property<Guid>("BookAuthorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookAuthorId");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookId");

                    b.HasKey("BookAuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("Book_BookAuthor", (string)null);
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BookTitle");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAvailable");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("BookAuthor", (string)null);
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CustomerPoints")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerPoints");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.HasOne("SimpleBookManagement.Domain.Entities.BookAuthor", null)
                        .WithMany()
                        .HasForeignKey("BookAuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleBookManagement.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.Book", b =>
                {
                    b.HasOne("SimpleBookManagement.Domain.Entities.Customer", "Customer")
                        .WithMany("Books")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.Isbn", "Isbn", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<long>("IsbnNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("Isbn");

                            b1.HasKey("BookId");

                            b1.ToTable("Book");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.Volume", "Volume", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<int>("VolumeNumber")
                                .HasColumnType("integer")
                                .HasColumnName("Volume");

                            b1.HasKey("BookId");

                            b1.ToTable("Book");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Isbn")
                        .IsRequired();

                    b.Navigation("Volume")
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.BookAuthor", b =>
                {
                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("BookAuthorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CompleteName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FullName");

                            b1.HasKey("BookAuthorId");

                            b1.ToTable("BookAuthor");

                            b1.WithOwner()
                                .HasForeignKey("BookAuthorId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CompleteName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FullName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.CustomerStatus", "CustomerStatus", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CustomerType")
                                .HasColumnType("integer")
                                .HasColumnName("CustomerStatus");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("SimpleBookManagement.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CompletePhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("CustomerStatus")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleBookManagement.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
